Configurações básicas

É importante nos identificarmos para o Git, informando nosso nome e e-mail. Em um terminal, execute os comandos a seguir:

$ git config --global user.name "Fulano da Silva"
$ git config --global user.email fulanodasilva.git@gmail.com

Antes de utilizarmos o Git, vamos criar na sua pasta pessoal, um diretório chamado citacoes com um arquivo filmes.txt.
Dentro do arquivo filmes.txt, coloque o seguinte conteúdo:

"Não há certezas, apenas oportunidades." (V de Vingança)
"Diga ’olá’ para meu pequeno amigo!" (Scarface)

Criando um repositório
Abra um terminal e vá até o diretório citacoes.

$ cd ~/citacoes

Para transformar o diretório atual em um repositório do Git, basta executar o comando git init:

$ git init

Deverá aparecer uma mensagem semelhante à seguinte:
Initialized empty Git repository in /home/fulano/citacoes/.git/

Podemos ver a situação dos arquivos no repositório Git com o comando:

$ git status

Para que o arquivo seja rastreado, devemos executar o seguinte comando:

$ git add filmes.txt

Para gravarmos as mudanças no repositório, devemos executar o comando:

$ git commit -m "Arquivo inicial de citacoes"

Para rastrearmos amodificação, devemos executar o comando git add novamente:

$ git add filmes.txt
$ git commit -m "Inserindo nova citacao"

Para verificar o histórico das alterações gravadas no repositório, podemos executar o comando git log:

$ git log

Criando um repositório no GitHub

No Repository name, devemos preencher o nome do repositório remoto.
No nosso caso, vamos preencher com “citacoes”.

Então, execute o comando git remote, conforme o que segue:

$ git remote add origin https://github.com/souzaleandror/comandos-gits

Para isso, basta executar o comando git push, da seguinte forma:
$ git push origin master

Para informar ao Git que o arquivo index.html deve ser rastreado, utilizamos o comando:
$ git add index.html

Na verdade, não! Podemos rastrear todos esses arquivos de uma vez só com o comando:
$ git add .

A área de stage
Quando informamos para o Git que queremos rastrear um arquivo, executando git add pela primeira vez, o Git coloca esse arquivo em uma área especial do repositório, chamada de stage.

Será que teremos sempre que lembrar de evitar o git add desses arquivos?
Se for assim, não poderemos mais utilizar git add ., já que esse comando rastreia todos os arquivos.
Para resolver isso, o Git tem um mecanismo que permite ignorarmos arquivos.
Basta criarmos umarquivo chamado .gitignore no diretório principal do nosso projeto, com os nomes dos arquivos que queremos ignorar.

Observe, porém, que o arquivo .gitignore apareceu como não rastreado.
É importante que esse arquivo seja rastreado, porque evoluirá junto com o repositório. Por isso, ao criar o .gitignore, não esqueça de adicioná-lo à área de stage com o comando:
$ git add .gitignore

todo.txt
tmp/

Há um projeto no GitHub com exemplos de arquivos .gitignore
para diversas linguagens de programação e tecnologias: https://github.
com/github/gitignore

Rastreando e comitando mudanças de uma só vez
$ git commit -a -m "Inserindo titulo e diminuindo tamanho da pagina"

Verificando o histórico do seu repositório
$ git log
$ git log -n 2
$ git log --oneline
$ git log --stat
$ git log -n 2 --oneline --stat

Para sairmos do resultados do git log, devemos apertar a tecla q.
Podemos também combinar as várias opções do comando git log

Verificando mudanças ainda não rastreadas
Se quisermos revisar amodificação efetuada, verificando as diferenças entre
o arquivo alterado e o que foi comitado anteriormente, podemos usar o
comando:
$ git diff

É possível mostrar as diferenças entre os arquivos na área de stage e a
última versão que foi comitada utilizando a opção --staged:
$ git diff --staged
