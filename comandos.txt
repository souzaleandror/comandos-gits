Configurações básicas

É importante nos identificarmos para o Git, informando nosso nome e e-mail. Em um terminal, execute os comandos a seguir:

$ git config --global user.name "Fulano da Silva"
$ git config --global user.email fulanodasilva.git@gmail.com

Antes de utilizarmos o Git, vamos criar na sua pasta pessoal, um diretório chamado citacoes com um arquivo filmes.txt.
Dentro do arquivo filmes.txt, coloque o seguinte conteúdo:

"Não há certezas, apenas oportunidades." (V de Vingança)
"Diga ’olá’ para meu pequeno amigo!" (Scarface)

Criando um repositório
Abra um terminal e vá até o diretório citacoes.

$ cd ~/citacoes

Para transformar o diretório atual em um repositório do Git, basta executar o comando git init:

$ git init

Deverá aparecer uma mensagem semelhante à seguinte:
Initialized empty Git repository in /home/fulano/citacoes/.git/

Podemos ver a situação dos arquivos no repositório Git com o comando:

$ git status

Para que o arquivo seja rastreado, devemos executar o seguinte comando:

$ git add filmes.txt

Para gravarmos as mudanças no repositório, devemos executar o comando:

$ git commit -m "Arquivo inicial de citacoes"

Para rastrearmos amodificação, devemos executar o comando git add novamente:

$ git add filmes.txt
$ git commit -m "Inserindo nova citacao"

Para verificar o histórico das alterações gravadas no repositório, podemos executar o comando git log:

$ git log

Criando um repositório no GitHub

No Repository name, devemos preencher o nome do repositório remoto.
No nosso caso, vamos preencher com “citacoes”.

Então, execute o comando git remote, conforme o que segue:

$ git remote add origin https://github.com/souzaleandror/comandos-gits

Para isso, basta executar o comando git push, da seguinte forma:
$ git push origin master

Para informar ao Git que o arquivo index.html deve ser rastreado, utilizamos o comando:
$ git add index.html

Na verdade, não! Podemos rastrear todos esses arquivos de uma vez só com o comando:
$ git add .

A área de stage
Quando informamos para o Git que queremos rastrear um arquivo, executando git add pela primeira vez, o Git coloca esse arquivo em uma área especial do repositório, chamada de stage.

Será que teremos sempre que lembrar de evitar o git add desses arquivos?
Se for assim, não poderemos mais utilizar git add ., já que esse comando rastreia todos os arquivos.
Para resolver isso, o Git tem um mecanismo que permite ignorarmos arquivos.
Basta criarmos umarquivo chamado .gitignore no diretório principal do nosso projeto, com os nomes dos arquivos que queremos ignorar.

Observe, porém, que o arquivo .gitignore apareceu como não rastreado.
É importante que esse arquivo seja rastreado, porque evoluirá junto com o repositório. Por isso, ao criar o .gitignore, não esqueça de adicioná-lo à área de stage com o comando:
$ git add .gitignore

todo.txt
tmp/

Há um projeto no GitHub com exemplos de arquivos .gitignore
para diversas linguagens de programação e tecnologias: https://github.
com/github/gitignore

Rastreando e comitando mudanças de uma só vez
$ git commit -a -m "Inserindo titulo e diminuindo tamanho da pagina"

Verificando o histórico do seu repositório
$ git log
$ git log -n 2
$ git log --oneline
$ git log --stat
$ git log -n 2 --oneline --stat

Para sairmos do resultados do git log, devemos apertar a tecla q.
Podemos também combinar as várias opções do comando git log

Verificando mudanças ainda não rastreadas
Se quisermos revisar amodificação efetuada, verificando as diferenças entre
o arquivo alterado e o que foi comitado anteriormente, podemos usar o
comando:
$ git diff

É possível mostrar as diferenças entre os arquivos na área de stage e a
última versão que foi comitada utilizando a opção --staged:
$ git diff --staged

A remoção do arquivo e adição na stage podem ser realizadas de uma vez
só através do comando:
$ git rm produtos.html

Renomeando arquivos

$ git mv estilos.css principal.css

Movendo arquivos

$ git mv principal.js js/principal.js

Desfazendo mudanças

Desfazendo mudanças não rastreadas

$ git checkout -- index.html

O comando git checkout desfaz as alterações ainda não rastreadas,
ou seja, que ainda não estão na área de stage, voltando ao conteúdo anterior
do arquivo.

E se apagarmos algum arquivo sem querer?

Vamos dizer que apagamos o arquivo index.html.

$ git checkout -- index.html

Desfazendo mudanças já rastreadas

$ git reset -- index.html

Quando utilizado dessa maneira, apenas informandoumarquivo que tem
mudanças na área de stage, o comando git reset retira o arquivo da stage
mas preserva tudo o que foi modificado nesse arquivo.

Se invocarmos o comando git reset sem nenhum parâmetro, serão
retirados todos os arquivos da área de stage. As alterações efetuadas
nesses arquivos serão preservadas.

No caso de querermos descartar todas as mudanças nos arquivos ao invocarmos
git reset, devemos utilizar a opção --hard.

Há um detalhe importante: a opção --hard retira todos os arquivos da
área de stage e desfaz todas as alterações nesses arquivos. No fim das contas,
o repositório fica exatamente no estado que estava no último commit.

Desfazendo mudanças já comitadas

Depois, comitamos as alterações:
$ git commit -am "Adicionando texto peculiar"

Na saída, teríamos algo como:

[master 6111116] Adicionando texto peculiar
1 file changed, 1 insertion(+)

Se quisermos voltar atrás, desfazendo as alterações no repositório, podemos utilizar o comando:
$ git revert --no-edit 6111116

Nesse comando, o código 6111116 representa o último commit efetuado.

Se omitirmos a opção --no-edit, será aberto um editor de texto para editarmos a mensagem do novo commit.

Criando um repositório remoto

A criação do repositório remoto é feita com o comando git init, da  mesma maneira que fizemos para criar o repositório local, entretanto devemos passar o parâmetro --bare ao comando:

$ git init --bare moveis-ecologicos.git

Ao executar o comando, será apresentada uma mensagem como:
Initialized empty Git repository
in /opt/repositorios/moveis-ecologicos.git/

4.2 Adicionando o repositório remoto

Supondo que o nosso servidor esteja na rede com o endereço IP 192.168.1.1 , e o repositório remoto do nosso projeto tenha sido criado
no diretório /opt/repositorios/moveis-ecologicos.git, para adicionarmos o repositório remoto devemos executar o comando git remote
add da seguinte maneira:

$ git remote add servidor file://192.168.1.1/opt/repositorios/moveis-ecologicos.git

Listando os repositórios remotos
Para listar os repositórios remotos que foram adicionados devemos utilizar o comando git remote:
$ git remote
servidor

Mas repare que é exibido apenas o name dos repositórios remotos. Para que também seja exibida a url devemos adicionar o parâmetro -v ao comando:
$ git remote -v

Observe que o repositório remoto foi listado duas vezes. Isso acontece pois o Git permite que tenhamos duas URLs distintas para o mesmo repositório remoto, sendo uma para leitura (fetch) e outra para escrita (push). Isto pode ser útil se precisarmos utilizar protocolos distintos para leitura e escrita.

Alterando e removendo os repositórios remotos

É possível alterar o name deumrepositório remoto utilizando o comando
git remote rename:

$ git remote rename servidor outronome
$ git remote

O que aconteceria se alguém alterasse o endereço IP do servidor de 192.168.1.1 para 192.168.1.2 ? Teríamos um problema, pois nosso repositório remoto estaria apontando para o endereço antigo. Devemos nesse caso alterar a url do repositório remoto, e isto é feito com outro comando, o git remote set-url, passando como parâmetro o name do repositório remoto e a nova url:

$ git remote -v
servidor file://192.168.1.1/opt/repositorios/
moveis-ecologicos.git (fetch)
servidor file://192.168.1.1/opt/repositorios/
moveis-ecologicos.git (push)

$ git remote set-url servidor
file://192.168.1.2/opt/repositorios/moveis-ecologicos.git

$ git remote -v
servidor file://192.168.1.2/opt/repositorios/
moveis-ecologicos.git (fetch)
servidor file://192.168.1.2/opt/repositorios/
moveis-ecologicos.git (push)

4.3 Enviando commits para o repositório remoto

Para enviar os commits locais, que ainda não existem no servidor, devemos  utilizar o comando git push, informando o name do repositório remoto, no nosso caso servidor, seguido de master: 

$ git push servidor master

A palavra master que utilizamos no comando anterior é o nome da branch principal do nosso repositório. Estudaremos branches com
profundidade mais adiante.

Clonando o repositório remoto

Para obtermos uma cópia de um repositório Git, devemos utilizar o comando git clone informando a URL do repositório a ser clonado:

$ git clone file://192.168.1.1/opt/repositorios/
moveis-ecologicos.git

Sincronizando o repositório local

A sincronização do repositório local com o servidor é feita com o uso do comando git pull, onde devemos informar o name do repositório remoto que queremos sincronizar, e o nome da branch local a ser atualizada:
$ git pull servidor master

Protocolos suportados pelo Git
• Local
• SSH
• Git
• HTTP/HTTPS

Protocolo local

A utilização do protocolo local é feita com o uso do prefixo file:// na URL do repositório a ser clonado:
$ git clone file:///opt/repositorios/moveis-ecologicos.git

É possível omitir o prefixo file:// na URL, bastando apenas informar o caminho do repositório:
$ git clone /opt/repositorios/moveis-ecologicos.git


Protocolo SSH
O protocolo SSH é, provavelmente, o mais utilizado, por ser rápido, se- guro, simples de configurar e por suportar tanto a leitura quanto a escrita de dados.

O uso do protocolo SSH é feito com a URL seguindo o padrão usuario@servidor:/caminho/repositorio.git. Por exemplo:
$ git clone root@192.168.1.1:/opt/repositorios/moveis-ecologicos.git

Protocolo Git

Para clonar um repositório utilizando o protocolo Git, a URL deve possuir o prefixo git://:
$ git clone git://192.168.1.1/opt/repositorios/
moveis-ecologicos.git

Protocolo HTTP/HTTPS


ParaclonarumrepositórioutilizandooprotocoloHTTP,aURLdevepos- suir o prefixo http://:
$ git clone http://192.168.1.1/opt/repositorios/moveis-ecologicos.git

Também é possível utilizar o protocolo HTTPS, que adiciona uma ca- mada de segurança sobre o HTTP, com a utilização do protocolo SSL/TLS:

$ git clone https://192.168.1.1/opt/repositorios/moveis-ecologicos.git

Hospedando o repositório no GitHub

Serviços de hospedagem de projetos:
• GitHub
• Bitbucket
• GoogleCode

GitHub: a rede social dos desenvolvedores
O GitHub é também uma ferramenta colaborativa, pois nos permite in- teragir nos repositórios, por meio de algumas funcionalidades como:
• Issue Tracker: para criação e gestão de bugs e milestones do projeto;
• Pull Requests: para que outros usuários possam enviar seus commits com alterações no projeto, ou commits com correções de bugs;
• Commit Comments: para que os usuários possam comentar e discutir sobre as modificações no código, de um determinado commit.

Criando o repositório do projeto

Agora que temos um usuário cadastrado, já é possível criar o repositório do projeto.
Para criar um novo repositório no GitHub, devemos acessar a URL http: //github.com/new ou clicar no botão New repository existente na página principal.

Agora basta adicionarmos o repositório remoto, com o comando git remote add, conforme exibido na página do repositório:
$ git remote add origin https://github.com/fulanodasilva/moveis-ecologicos.git

Enviando os commits do projeto para o GitHub

O envio dos commits é feito da mesma maneira que vimos no capítulo anterior, ou seja, utilizando o comando git push:
$ git push origin master

Para que um novo desenvolvedor obtenha uma cópia do repositório, ele agora deverá clonar o repositório remoto localizado no GitHub:
$ git clone https://github.com/fulanodasilva/moveis-ecologicos.git

Colaborando com projetos open source

Primeiramente vamos precisar clonar o repositório, para termos acesso ao código-fonte, e então efetuar as melhorias desejadas:
$ git clone https://github.com/caelum/vraptor4.git

Pronto! Já temos uma cópia do repositório com todos os arquivos do projeto. Agora basta efetuar as melhorias desejadas, registrando as alterações realizadas com commits.
Mas lembre-se de que os commits realizados existem apenas no nosso repositório local, precisamos agora enviá-los para o repositório remoto do projeto, no GitHub, com o comando git push:
$ git push origin master

O problema é que o usuário fulanodasilva não tem permissão para enviar commits para o repositório do VRaptor, pois esse repositório não per- tence a ele, mas sim ao usuário caelum.
Para resolver esse problema, o usuário caelum poderia acessar a página de configurações do repositório VRaptor no GitHub, e adicionar o usuário fulanodasilva como colaborador.

Pull requests
A solução do GitHub para a colaboração com projetos open source, foi uma funcionalidade chamada de pull requests.
Primeiramente, devemos acessar a página do projeto que queremos cola- borar no GitHub, no nosso caso http://github.com/caelum/vraptor4, e clicar no botão Fork:

Ao clicar no botão Fork, o GitHub criará uma cópia do repositório do VRaptor no nosso usuário do GitHub:


Repare que agora o nosso usuário do GitHub possui um repositório cha- mado vraptor4, ou seja, esse repositório é a nossa versão do projeto.
O próximo passo é clonar o repositório a partir do nosso usuário do GitHub, e não do usuário caelum, pois assim conseguiremos realizar o push dos commits locais para o nosso repositório no GitHub:
$ git clone https://github.com/fulanodasilva/vraptor4.git

Agora, após realizar as alterações e commits no projeto, conseguiremos realizar o push normalmente, pois o repositório remoto no GitHub pertence ao nosso usuário.
Entretanto, os commits foram enviados apenas para o nosso repositório no GitHub.
Para que os commits sejam integrados ao repositório original do projeto, no caso o repositório vraptor4 do usuário caelum, devemos enviar um Pull Request para o usuário caelum, solicitando que seja feito um pull dos nossos commits.
Para criar um Pull Request devemos acessar a página do nosso repo- sitório no GitHub, clicar no link Pull Requests, e em seguida clicar no botão New pull request:

Organizando o trabalho com branches

Trabalhando em paralelo com branches

A maioria dos sistemas de controle de versão permite trabalho em para- lelo através de branches. Uma branch é uma linha independente de desenvol- vimento em que podemos comitar novas versões do código sem afetar outras branches.

Em muitos sistemas de controle de versão, utilizar branches é algo bas- tante lento e trabalhoso. Porém, a estrutura interna do Git permite lidarmos com branches de maneira muito rápida e leve.

A branch master

Para listar as branches do nosso repositório, devemos executar o co- mando:
$ git branch
Teremos como resposta:
* master

Se quisermos listar as branches existentes no nosso repositório com os commits associados, poderíamos utilizar a opção -v do comando git branch:
$ git branch -v
A resposta, no nosso caso, seria:
* master b92285b Revert "Adicionando texto peculiar"

Podemos observar os commits com seus respectivos pais executando o comando git log com a opção --parents.
Já para verificarmos o commit para o qual a master está apontando, passamos a opção --decorate para o comando git log.
Juntando as opções, podemos executar git log --oneline --decorate --parents para exibir o histórico resumido do nosso repositório com o commit para o qual a master está apontado e os commits pai de cada commit. Teríamos uma saída parecida com:

Criando uma branch
Para criarmos uma branch chamada design para trabalharmos na melhoria do design basta executarmos:
$ git branch design

A nova branch que acabamos de criar ( design) aponta para o mesmo commit que a branch que estávamos anteriormente ( master). Podemos ve- rificar isso com o comando git branch -v:

Trocando de branch

Já criamos nossa branch design mas ainda estamos na master. Para tro- carmos para a branch recentemente criada, devemos executar:

$ git checkout design
Deve aparecer como resposta:
Switched to branch ’design’

Depois de executar o comando anterior, o HEAD passa a apontar para a nova branch design.
Se executarmos o comando git branch -v, teremos:
* design b92285b Revert "Adicionando texto peculiar"
  master b92285b Revert "Adicionando texto peculiar"
  
Conforme vimos no capítulo 3, o comando git checkout, além de trocar a branch atual, também pode ser usado para descartar mudanças de um arquivo que ainda não estão na área de stage. Para descartarmos as mudanças do arquivo index.html, por exemplo, devemos executar git checkout -- index.html.

Na verdade, a opção -- não é estritamente necessária. Porém, é uma boa prática, já que serve para informar que se trata de um arquivo. Dessa maneira, ajuda a evitar problemas caso uma branch tenha o mesmo nome de algum arquivo.

Criando e já trocando para uma nova branch

Criar uma branch loja com git branch só para depois mudar para a nova branch com git checkout é algo tedioso.
Seria interessante já criarmos e mudarmos para a nova branch loja de uma só vez. Podemos fazer isso passando a opção -b para o comando git checkout:
$ git checkout -b loja
A saída apresentada seria:
Switched to a new branch ’loja’

Deletando uma branch

Não é possível remover uma branch enquanto estivermos nela. Por isso, devemos ir para outra branch. Para ir para a branch master, devemos exe- cutar git checkout master.
Para deletar uma branch, devemos utilizar a opção -d do comando git branch:
$ git branch -d loja
Deve aparecer uma mensagem como a seguir:
Deleted branch loja (was b92285b).


Se já tivéssemos feito algum commit na branch loja, ao executarmos git branch -d loja teríamos como resposta:
error: The branch ’loja’ is not fully merged.
If you are sure you want to delete it, run ’git branch -D loja’.
Não é possível deletar com a opção -d uma branch que possui commits ainda não aplicados em outras branches (veremos como mesclar branches mais adiante).
Para removermos a branch loja se tivermos feito algum commit, deve- mos utilizar a opção -D:
$ git branch -D loja
Teríamos na saída:
Deleted branch loja (was b92285b).

Voltando para o master e fazendo uma alteração
A primeira coisa que devemos fazer é voltar para a branch master, exe- cutando o comando git checkout master.

Mesclando alterações (Branches)

Verificando branches ainda não mescladas

Considerando que estamos na branch master, podemos verificar as branches ainda não mescladas com a opção --no-merged do comando git branch:
$ git branch --no-merged
Teríamos a seguinte saída:
design

sso indica que há mudanças ainda não mescladas na branch design.
O comando git branch também tem a opção --merged. Se execu- tássemos git branch --merged, teríamos:
* master

Para juntarmos todas as alterações que fizemos na branch design com as da branch master, mesclando as duas, podemos utilizar o comando:
$ git merge design -m "Mesclando com a branch design"

Mesclando alterações com rebase

Há uma maneira alternativa de mesclar as alterações de duas branches
que simplifica o histórico do projeto. Considerando que estamos na branch master, em vez de utilizar git merge, é possível utilizar:
$ git rebase design
Na saída, deve aparecer algo como:  
First, rewinding head to replay your work on top of it...
Applying: Alterando textos do banner


Trabalhando em equipe com branches remotas

Podemos listar as branches remotas passando a opção -r para o comando git branch:
$ git branch -r
Teremos na saída:
origin/master

Se quisermos mostrar tanto as branches locais como as remotas, po- demos utilizar o comando git branch -a.

Para vermos para quais commits as branches remotas estão apontando, podemos utilizar o comando anterior com a opção -v:
$ git branch -r -v

Compartilhando branches
A branch design ainda não existe lá no GitHub. Para compartilhá-la deve- mos informar os nomes do remote e da branch para o comando git push:
$ git push origin design

Obtendo novas branches remotas em outros repositórios

Então, chamado vamos outro,
clonar o repositório em um diretório executando o comando git clone
git@github.com:fulanodasilva/moveis-ecologicos.git outro.
Depois de clonar o repositório, é importante entrar no diretório, com o comando cd outro.
Se listarmos as branches locais e remotas com o comando git branch -a -v, teremos:

Porém, não temos ainda uma branch local design. Se precisarmos tra- balhar nessa branch no novo repositório outro, precisamos executar o se- guinte comando:
$ git checkout -b design origin/design

Branches locais criadas a partir de branches remotas são chamadas de
tracking branches.
Se executarmos git branch -a -v novamente, teremos:

Uma outra maneira, mais sucinta, de criar uma tracking branch é uti- lizar a opção -t do comando git checkout.
No nosso caso, faríamos git checkout -t origin/design. Seria criada localmente a tracking branch design relacionada com a branch remota origin/design.

Obtendo commits de uma branch remota Um novo commit

Trazendo commits de um repositório remoto com fetch
Para obtermos os commits da branch remota origin/master no nosso repositório outro, podemos executar o comando:
$ git fetch origin

Com o comando git fetch, trazemos os commits de uma branch re- mota que ainda não estavam presentes localmente.

Porém, os novos commits da branch remota origin/master ainda não foram aplicados na branch local master, o que podemos constatar execu- tando o comando git branch -a -v:

Mesclando branches remotas e locais
Mesclando branches remotas e locais com merge

Obtendo commits e mesclando de uma vez com pull
Para obtermos e mesclarmos os novos commits de uma branch remota com uma branch local poderíamos ter usado um comando só:
$ git pull

Para saber mais: Qual usar? Um pull ou um pull --rebase?
Usar git pull ou git pull --rebase ao mesclar com mudanças remotas é uma questão parecida com a de se devemos usar git merge ou git rebase para mesclagens locais.

Para removermos definitivamente a branch remota origin/contato e a branch contato lá do GitHub, devemos executar:
$ git push origin :contato

Controlando versões do código com tags

Em sistemas de controle de versão, essas fotos de um determinado ins- tante de um repositório são chamadas de tags.

Criando, listando e deletando tags
Para criarmos uma tag v1.0 no Git, devemos executar o comando: 

$ git tag v1.0

Se quisermos listar as tags do nosso repositório, basta executarmos:
$ git tag

Podemos criar uma tag para um commit passado. Se quisermos criar uma tag chamada banners para o commit 2223859 (Alterando textos do ban- ner), devemos executar:
$ git tag banners 2223859

Imagine que tenhamos errado o nome de uma tag. Por exemplo, criamos a tag verssao1 com o comando git tag verssao1. Podemos deletá-la com o comando:
$ git tag -d verssao1

Mais informações com tags anotadas

Se desejarmos manter mais informações como quando uma tag foi criada, quem a criou, além de termos uma mensagem descritiva, devemos criar tags anotadas.
$ git tag -a v1.1 -m "Liberando versão urgente"

Podemos exibir as informações de uma tag anotada com o comando:
$ git show -s v1.1

Compartilhando tags com a sua equipe

Para compartilhar tags, fazemos de maneira parecida com o que fizemos com branches, utilizando o comando git push. Para compartilhar a tag v1.0, devemos executar o comando:
$ git push origin v1.0


Se quisermos enviar todas as novas tags do repositório local para um repositório remoto podemos utilizar o comando git push com a opção --tags:
$ git push origin --tags

Lidando com conflitos

Mesclando mudanças em um mesmo arquivo sem conflitos

Conflitos após um merge com mudanças em um mesmo arquivo


Mesmo sendo muito bom para fazer o merge automático, dessa vez o Git não conseguiu mesclar o arquivo index.html de maneira clara porque fo- ram feitas alterações na mesma região do arquivo.
De forma cautelosa, o Git marcou um conflito com os caracteres <, = e >.
Entre os textos <<<<<<< HEAD e ======= estão as alterações que fize- mos na branch master, que é a branch atual, para qual o HEAD está apon- tando.
Já entre ======= e >>>>>>> design, estão as alterações que fizemos na branch design.

Para informarmos para o Git que resolvemos o conflito no arquivo, temos que adicioná-lo à área de stage executando git add index.html.

Repare que o arquivo index.html aparece como modificado e está pronto para ser comitado.
Depois disso, falta comitarmos as mudanças com o comando git commit -am "Resolvendo conflitos após merge de design". Como resposta, veremos:

Resolvendo conflitos após um rebase

Usando uma ferramenta para resolver conflitos
Com Git, podemos invocar uma ferramenta de resolução de conflitos com o comando:
$ git mergetool

Podemos, então, comitar o arquivo index.html agora sem con- flitos, executando git commit -am "Resolvendo conflitos após merge de design". Na saída, teremos:



